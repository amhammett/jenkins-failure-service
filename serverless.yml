service: "jfs-${env:ENV}"

provider:
  name:       aws
  runtime:    nodejs6.10
  region:     ${env:AWS_DEFAULT_REGION, 'us-west-2'}
  stage:      ${opt:stage}
  memorySize: 128
  timeout:    6

  environment:
    ALLOW_CIDR: "${env:ALLOW_CIDR, 'x.x.x.x'}"
    ENV: "${env:ENV, 'missing'}"
    FAILURE_ENDPOINT: "jfs-${env:ENV}-failures"
    SUBSCRIPTION_ENDPOINT: "jes-${env:ENV}-v1-list"
    EMAIL_ENDPOINT: "yams-${env:ENV}-send"

  iamRoleStatements:
    - Effect: Allow
      Action:
        - Lambda:InvokeFunction
      Resource: "arn:aws:lambda:${opt:region, self:provider.region}:*:function:${self:provider.environment.SUBSCRIPTION_ENDPOINT}"
    - Effect: Allow
      Action:
        - Kinesis:PutRecord
      Resource: "arn:aws:kinesis:${opt:region, self:provider.region}:*:stream/${self:provider.environment.EMAIL_ENDPOINT}"

package:
  include:
    - node_modules/*
    - src/*.js
  exclude:
    - venv

functions:
  compute:
    handler: src/compute.compute
    events:
      - stream:
          type: kinesis
          arn: { Fn::GetAtt: [ KinesisStream, Arn ] }
          batchSize: 100
          startingPosition: TRIM_HORIZON

resources:
  Resources:
    KinesisStream:
      Type: AWS::Kinesis::Stream
      Properties:
        Name: "jfs-${env:ENV}-failures"
        ShardCount: 1
